// Mocks generated by Mockito 5.4.4 from annotations
// in goldwen_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/material.dart' as _i6;
import 'package:goldwen_app/features/matching/providers/matching_provider.dart' as _i4;
import 'package:goldwen_app/features/subscription/providers/subscription_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSubscriptionProvider_0 extends _i1.SmartFake
    implements _i2.SubscriptionProvider {
  _FakeSubscriptionProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MatchingProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchingProvider extends _i1.Mock implements _i4.MatchingProvider {
  MockMatchingProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  String? get error => (super.noSuchMethod(Invocation.getter(#error)) as String?);

  @override
  List<dynamic> get dailyProfiles => (super.noSuchMethod(
        Invocation.getter(#dailyProfiles),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  List<String> get selectedProfileIds => (super.noSuchMethod(
        Invocation.getter(#selectedProfileIds),
        returnValue: <String>[],
      ) as List<String>);

  @override
  int get remainingSelections => (super.noSuchMethod(
        Invocation.getter(#remainingSelections),
        returnValue: 0,
      ) as int);

  @override
  bool get canSelectMore => (super.noSuchMethod(
        Invocation.getter(#canSelectMore),
        returnValue: false,
      ) as bool);

  @override
  bool get isSelectionComplete => (super.noSuchMethod(
        Invocation.getter(#isSelectionComplete),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> loadDailySelection() => (super.noSuchMethod(
        Invocation.method(
          #loadDailySelection,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SubscriptionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionProvider extends _i1.Mock
    implements _i2.SubscriptionProvider {
  MockSubscriptionProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasActiveSubscription => (super.noSuchMethod(
        Invocation.getter(#hasActiveSubscription),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  String? get error => (super.noSuchMethod(Invocation.getter(#error)) as String?);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}